import { toast } from 'sonner';

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';

import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Verificar se as variáveis de ambiente estão configuradas
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  // Em ambiente de desenvolvimento, alerta sobre a configuração faltante
  if (import.meta.env.DEV) {
    console.error(
      "⚠️ Variáveis de ambiente SUPABASE não configuradas!\n" +
      "Por favor, configure as variáveis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no arquivo .env\n" +
      "Você pode copiar o arquivo .env.example para .env e preencher com seus valores."
    );
  }
}

// Custom fetch implementation with retry logic
const fetchWithRetry = async (url: RequestInfo | URL, options?: RequestInit, maxRetries = 3): Promise<Response> => {
  let retries = 0;
  let lastError: Error = new Error('Unknown error occurred');

  while (retries < maxRetries) {
    try {
      // Add timeout to prevent long-running requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout
      
      const modifiedOptions = {
        ...options,
        signal: controller.signal
      };
      
      const response = await fetch(url, modifiedOptions);
      clearTimeout(timeoutId);
      
      // Check for specific error status codes that should trigger a retry
      if (response.status >= 500 && response.status < 600) {
        throw new Error(`Server error: ${response.status}`);
      }
      
      return response;
    } catch (err) {
      lastError = err as Error;
      retries++;
      
      // Exponential backoff with jitter
      const delay = Math.min(1000 * 2 ** retries + Math.random() * 1000, 10000);
      
      if (retries < maxRetries) {
        console.warn(`Supabase request failed, retrying (${retries}/${maxRetries}) after ${delay}ms`, err);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  console.error('Supabase fetch error after retries:', lastError);
  
  // Only show notification if online but server is unreachable
  if (navigator.onLine) {
    toast.error('Erro de conexão', {
      description: 'Não foi possível conectar ao servidor. Usando modo offline temporariamente.',
      id: 'supabase-connection-error',
      duration: 5000
    });
  }
  
  throw lastError;
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create supabase client with auto-retry and improved options
export const supabase = createClient<Database>(
  SUPABASE_URL || "",
  SUPABASE_PUBLISHABLE_KEY || "",
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true
    },
    global: {
      fetch: fetchWithRetry
    }
  }
);

// Offline mode detection
let isOfflineMode = false;

// Validate connection at startup and provide fallback
(async function validateConnection() {
  try {
    const { error } = await supabase.from('temp_emails').select('count').limit(1).maybeSingle();
    if (error) throw error;
    console.log('✅ Supabase connection established successfully');
    isOfflineMode = false;
  } catch (err) {
    console.error('❌ Failed to connect to Supabase:', err);
    isOfflineMode = true;
    
    // Only show error in production
    if (import.meta.env.PROD) {
      toast.error('Modo offline ativado', {
        description: 'Algumas funcionalidades podem estar limitadas',
        duration: 5000,
        id: 'supabase-fallback-mode',
      });
    }
  }
})();

// Event listeners for online/offline status
window.addEventListener('online', async () => {
  if (isOfflineMode) {
    try {
      const { error } = await supabase.from('temp_emails').select('count').limit(1).maybeSingle();
      if (!error) {
        isOfflineMode = false;
        toast.success('Modo online ativado', {
          description: 'Conectado ao servidor novamente',
          id: 'online-notification',
          duration: 3000,
        });
      }
    } catch (err) {
      console.error('Failed to reconnect to Supabase:', err);
    }
  }
});

window.addEventListener('offline', () => {
  isOfflineMode = true;
  toast.error('Modo offline ativado', {
    description: 'Você está offline. Algumas funcionalidades podem não estar disponíveis.',
    id: 'offline-notification',
    duration: 5000,
  });
});

// Export offline status helper
export const isOffline = () => isOfflineMode;